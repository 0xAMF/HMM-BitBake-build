#!/bin/sh

__BITBAKE_LAST_LINE=0

# Emit a useful diagnostic if something fails:
bb_sh_exit_handler() {
    ret=$?
    if [ "$ret" != 0 ]; then
        echo "WARNING: exit code $ret from a shell command."
    fi
    exit $ret
}

bb_bash_exit_handler() {
    ret=$?
    { set +x; } > /dev/null
    trap "" DEBUG
    if [ "$ret" != 0 ]; then
        echo "WARNING: ${BASH_SOURCE[0]}:${__BITBAKE_LAST_LINE} exit $ret from '$1'"

        echo "WARNING: Backtrace (BB generated script): "
        for i in $(seq 1 $((${#FUNCNAME[@]} - 1))); do
            if [ "$i" -eq 1 ]; then
                echo -e "	#$((i)): ${FUNCNAME[$i]}, ${BASH_SOURCE[$((i-1))]}, line ${__BITBAKE_LAST_LINE}"
            else
                echo -e "	#$((i)): ${FUNCNAME[$i]}, ${BASH_SOURCE[$((i-1))]}, line ${BASH_LINENO[$((i-1))]}"
            fi
        done
    fi
    exit $ret
}

bb_bash_debug_handler() {
    local line=${BASH_LINENO[0]}
    # For some reason the DEBUG trap trips with lineno=1 when scripts exit; ignore it
    if [ "$line" -eq 1 ]; then
        return
    fi

    # Track the line number of commands as they execute. This is so we can have access to the failing line number
    # in the EXIT trap. See http://gnu-bash.2382.n7.nabble.com/trap-echo-quot-trap-exit-on-LINENO-quot-EXIT-gt-wrong-linenumber-td3666.html
    if [ "${FUNCNAME[1]}" != "bb_bash_exit_handler" ]; then
        __BITBAKE_LAST_LINE=$line
    fi
}

case $BASH_VERSION in
"") trap 'bb_sh_exit_handler' 0
    set -e
    ;;
*)  trap 'bb_bash_exit_handler "$BASH_COMMAND"' 0
    trap '{ bb_bash_debug_handler; } 2>/dev/null' DEBUG
    set -e
    shopt -s extdebug
    ;;
esac
export HOME="/home/fyd"
export LC_ALL="en_US.UTF-8"
export LOGNAME="fyd"
export PATH="/home/fyd/stm/bitbake/bitbake-2.8.3/bin:/home/fyd/.cargo/bin:/home/fyd/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin"
export SHELL="/bin/bash"
export USER="fyd"

# line: 4, file: /home/fyd/stm/bitbake/hmmmmm/build/../meta-hmm/recipes-hmm/hmm/hmm_0.1.bb
do_build() {
             cd /home/fyd/stm/bitbake/hmmmmm/hmm/
             gcc -g -Wall -fPIC -c main.c -o main.o
             gcc -g -Wall -fPIC -c  /home/fyd/stm/bitbake/hmmmmm/hmm//lib/myalloc.c -o /home/fyd/stm/bitbake/hmmmmm/hmm//lib/myalloc.o
             ar rcs /home/fyd/stm/bitbake/hmmmmm/hmm//lib/libhmm.a /home/fyd/stm/bitbake/hmmmmm/hmm//lib/myalloc.o
             gcc -g -Wall -fPIC -shared -o /home/fyd/stm/bitbake/hmmmmm/hmm//lib/libhmm.so /home/fyd/stm/bitbake/hmmmmm/hmm//lib/myalloc.o
             gcc -g -Wall -fPIC main.o /home/fyd/stm/bitbake/hmmmmm/hmm//lib/libhmm.so -o main
             echo "=== Build Done ==="
}

cd '/home/fyd/stm/bitbake/hmmmmm/build'
do_build

# cleanup
ret=$?
trap '' 0
exit $ret
